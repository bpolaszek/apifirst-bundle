<?php
/**
 * ApiGuardAuthenticator.php
 * Generated by PhpStorm - 07/2016
 * Project APIFirstBundle
 * @author Beno!t POLASZEK
 **/

namespace BenTools\ApiFirstBundle\Services;

use BenTools\HelpfulTraits\Symfony\EntityManagerAwareTrait;
use Doctrine\Common\Persistence\ManagerRegistry;
use Symfony\Component\HttpFoundation\JsonResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\RequestMatcherInterface;
use Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorageInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Guard\AbstractGuardAuthenticator;
use Symfony\Component\Security\Guard\Token\PostAuthenticationGuardToken;

class ApiGuardAuthenticator extends AbstractGuardAuthenticator implements RequestMatcherInterface {

    use EntityManagerAwareTrait;

    /**
     * @var ApiConsumerDetector
     */
    private $apiConsumerDetector;

    /**
     * @var
     */
    private $userClass;

    /**
     * @var TokenStorageInterface
     */
    private $tokenStorage;

    /**
     * APIGuardAuthenticator constructor.
     * @param ApiConsumerDetector   $apiConsumerDetector
     * @param ManagerRegistry       $managerRegistry
     * @param string                $userClass
     * @param TokenStorageInterface $tokenStorage
     */
    public function __construct(ApiConsumerDetector $apiConsumerDetector, ManagerRegistry $managerRegistry, $userClass, TokenStorageInterface $tokenStorage) {
        $this->managerRegistry     = $managerRegistry;
        $this->userClass           = $userClass;
        $this->tokenStorage        = $tokenStorage;
        $this->apiConsumerDetector = $apiConsumerDetector;
    }

    /**
     * @inheritDoc
     */
    public function getCredentials(Request $request) {

        if (!$this->matches($request))
            return null;

        if (!preg_match('/(^Bearer )([a-z0-9]+)$/', $request->headers->get('Authorization', ''), $matches))
            throw new AuthenticationException("Invalid Authorization header format, expecting 'Bearer token'");

        return $matches[2];
    }

    /**
     * @inheritDoc
     */
    public function getUser($token, UserProviderInterface $userProvider) {
        return $this->getRepositoryOf($this->userClass)->findOneBy([
            'apiKey' => $token,
        ]);
    }

    /**
     * @inheritDoc
     */
    public function checkCredentials($credentials, UserInterface $user) {
        return true;
    }

    /**
     * @inheritDoc
     */
    public function onAuthenticationFailure(Request $request, AuthenticationException $exception) {
        return new JsonResponse(['error' => $exception->getMessage()], JsonResponse::HTTP_FORBIDDEN);
    }

    /**
     * @inheritDoc
     */
    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey) {
        return null;
    }

    /**
     * @inheritDoc
     */
    public function supportsRememberMe() {
        return false;
    }

    /**
     * @inheritDoc
     */
    public function start(Request $request, AuthenticationException $authException = null) {
        return new JsonResponse(null, JsonResponse::HTTP_UNAUTHORIZED);
    }

    /**
     * @param Request $request
     * @return bool
     */
    public function matches(Request $request) {
        if ($this->tokenStorage && $this->tokenStorage->getToken() && $this->tokenStorage->getToken()->isAuthenticated() && !$this->tokenStorage->getToken() instanceof PostAuthenticationGuardToken)
            return false;
        return $this->apiConsumerDetector->looksLikeAnApiRequest();
    }
}